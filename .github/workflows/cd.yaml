name: CD (dev | pre-release | release)

on:
  push:
    branches:
      - master
      - main
      - pre-release/**
      - release/**
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive environment and tag
        id: meta
        shell: bash
        run: |
          REF="${GITHUB_REF_NAME}"
          if [[ "$REF" == "master" || "$REF" == "main" ]]; then NS="dev"; ENV="dev";
          elif [[ "$REF" == pre-release/* ]]; then NS="pre-release"; ENV="pre";
          elif [[ "$REF" == release/* ]]; then NS="release"; ENV="prod";
          else echo "Unsupported branch $REF"; exit 1; fi
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "ns=$NS" >> "$GITHUB_OUTPUT"
          echo "env=$ENV" >> "$GITHUB_OUTPUT"
          echo "tag=${ENV}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "repo_lower=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install deps (root)
        run: npm ci

      - name: Backend tests
        run: npm test -w backend --if-present

      - name: Frontend tests
        run: npm test -w frontend --if-present

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build+Push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ghcr.io/${{ steps.meta.outputs.repo_lower }}/backend:${{ steps.meta.outputs.tag }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.meta.outputs.repo_lower }}/backend:cache
          cache-to: type=registry,ref=ghcr.io/${{ steps.meta.outputs.repo_lower }}/backend:cache,mode=max

      - name: Build+Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ steps.meta.outputs.repo_lower }}/frontend:${{ steps.meta.outputs.tag }}
          cache-from: type=registry,ref=ghcr.io/${{ steps.meta.outputs.repo_lower }}/frontend:cache
          cache-to: type=registry,ref=ghcr.io/${{ steps.meta.outputs.repo_lower }}/frontend:cache,mode=max

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.6

      - name: Setup Helm
        uses: azure/setup-helm@v4

      - name: Configure kubeconfig
        shell: bash
        run: |
          case "${{ steps.meta.outputs.ns }}" in
            dev)  CFG="${{ secrets.KUBE_CONFIG_DEV }}" ;;
            pre-release) CFG="${{ secrets.KUBE_CONFIG_PRE }}" ;;
            release) CFG="${{ secrets.KUBE_CONFIG_REL }}" ;;
          esac
          echo "$CFG" | base64 -d > $HOME/.kube/config
          kubectl version --client
          kubectl cluster-info

      - name: Create namespace if missing
        run: kubectl create ns ${{ steps.meta.outputs.ns }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply base manifests
        run: kubectl -n ${{ steps.meta.outputs.ns }} apply -f .ergomake/k8s-manifests.yaml

      - name: Set images
        run: |
          NS="${{ steps.meta.outputs.ns }}"
          TAG="${{ steps.meta.outputs.tag }}"
          kubectl -n "$NS" set image deploy/backend backend=ghcr.io/${{ steps.meta.outputs.repo_lower }}/backend:$TAG
          kubectl -n "$NS" set image deploy/frontend frontend=ghcr.io/${{ steps.meta.outputs.repo_lower }}/frontend:$TAG

      - name: Rollout status
        run: |
          NS="${{ steps.meta.outputs.ns }}"
          kubectl -n "$NS" rollout status deploy/backend --timeout=180s
          kubectl -n "$NS" rollout status deploy/frontend --timeout=180s
          kubectl -n "$NS" rollout status deploy/postgres --timeout=180s || true

      - name: Install/upgrade Prometheus+Grafana
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install kps prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace \
            --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
            --set prometheus.prometheusSpec.serviceMonitorNamespaceSelector={}
      - name: Apply ServiceMonitors
        run: kubectl -n ${{ steps.meta.outputs.ns }} apply -f .ergomake/monitoring/servicemonitors.yaml

      - name: Rollback on failure
        if: failure()
        run: |
          NS="${{ steps.meta.outputs.ns }}"
          kubectl -n "$NS" rollout undo deploy/backend || true
          kubectl -n "$NS" rollout undo deploy/frontend || true